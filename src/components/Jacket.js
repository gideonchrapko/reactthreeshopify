/*
auto-generated by: https://github.com/react-spring/gltfjsx
*/

// import * as THREE from 'three'
import React, { useRef, useState, useEffect } from 'react'
import { useLoader } from 'react-three-fiber'
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'
import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader'
import Shadow from './Shadow'

export default function Model(props) {
  const group = useRef() 
  const { nodes, materials  } = useLoader(GLTFLoader, '/jacketDraco.glb', loader => {
    const dracoLoader = new DRACOLoader()
    dracoLoader.setDecoderPath('/draco-gltf/')
    loader.setDRACOLoader(dracoLoader)
  })

  // const [hovered, set] = useState(false)
  // useEffect(() => void (document.body.style.cursor = hovered ? 'pointer' : 'auto'), [hovered])



  return (
    <group ref={group} {...props} dispose={null}>
      <mesh
        
        material={materials.Material}
        geometry={nodes.Top.geometry}

        position={[3, -11.5, 1.39]}
        // position={hovered ? [3, -11.5, 1.39] : [3, -8, 1.39]}

        rotation={[Math.PI / 2, 0, -1.3]}
        scale={[0.1, 0.1, 0.1]}

        // scale={hovered ? [0.1, 0.1, 0.1] : [0.07, 0.07, 0.07]}

        // onPointerOver={() => set(true)}
        // onPointerOut={() => set(false)}
        // color={hovered ? 'red' : 'black'}
        >
      </mesh>
      <Shadow position={[2.6, -1.5, 1.2]} scale={[4, 4, 1]} rotation={[-Math.PI / 2, 0, 0]}/>
    </group>
  )
}
